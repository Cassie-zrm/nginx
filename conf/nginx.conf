
#user  nobody;
#启动进程 根据cpu核心来的
worker_processes 1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
events {
    #worker_processes 最大并发连接数
    worker_connections 1024;
}

# http 服务器
http {
    include mime.types;
    default_type application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #处理静态文件 大的静态文件 效率很高，因为回通过线程池进行分布式加载
    sendfile on;
    #tcp_nopush     on;

    #超时时间
    #keepalive_timeout  0;
    keepalive_timeout 65;

    # 开启压缩 html css js
    #gzip  on;
    # gzip_comp_level 6 ; #等级越高压缩的越好 但是消耗这些
    #gzip_static on | off | always 压缩静态资源
    # gzip types text/plain text/css text/xml text/javascript

    #负载均衡 weight 数值越大负责越多 server 127.0.0.1:3000 weight=3;
    #容灾技术 backup   server 127.0.0.1:3002 backup; 其他服务器挂了，备用服务器
    upstream cassie {
        server 127.0.0.1:3000;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002 backup;
    }

    #限速技术
    limit_req_zone $binary_remote_addr zone=rate_limit:10m rate=100r/s;

    server {
        listen 80;
        server_name localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        # 代理 / 代理的路径
        location / {
            root html; #html根目录
            index index.html index.htm; #对应下面的文件
        }

        #反向代理
        location /api {
            proxy_pass http://cassie;
            rewrite ^/api/(.*) /$1 break;
            limit_req zone=rate_limit burst=5 nodelay;
        }
        #error_page  404              /404.html;、

        # redirect server error pages to the static page /50x.html
        #报错 500 502 503 504 这四个错误码之内返回这个50.html页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
